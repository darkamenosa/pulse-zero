/**
 * Pulse Connection Monitor
 *
 * Monitors WebSocket connection health and automatically reconnects when needed.
 * Inspired by Turbo Rails' connection monitor but adapted for our needs.
 */

import { touchActivity, getLastActivity } from './pulse'

export interface ConnectionMonitorOptions {
  staleThreshold: number // seconds before considering connection stale
  reconnectInterval: number[] // exponential backoff intervals
}

const DEFAULT_OPTIONS: ConnectionMonitorOptions = {
  staleThreshold: 12, // 12 seconds (2 ping intervals)
  reconnectInterval: [3, 5, 10, 30, 60] // seconds
}

class PulseConnectionMonitor {
  private options: ConnectionMonitorOptions
  private reconnectAttempts = 0
  private pollInterval: number | null = null
  private visibilityDidChange = this.handleVisibilityChange.bind(this)
  private isRunning = false
  private lastMessageActivity = Date.now()
  private lastReconnectAt = 0
  private isConnecting = false

  constructor(options: Partial<ConnectionMonitorOptions> = {}) {
    this.options = { ...DEFAULT_OPTIONS, ...options }
  }

  start() {
    if (this.isRunning) return

    this.isRunning = true
    this.startPolling()
    this.setupEventListeners()
  }

  stop() {
    if (!this.isRunning) return

    this.isRunning = false
    this.stopPolling()
    this.removeEventListeners()
  }

  private startPolling() {
    this.stopPolling()
    this.poll()
    this.pollInterval = window.setInterval(() => this.poll(), 6000) // 6 seconds
  }

  private stopPolling() {
    if (this.pollInterval) {
      clearInterval(this.pollInterval)
      this.pollInterval = null
    }
  }

  private poll() {
    const now = Date.now()
    const secondsSinceActivity = (now - getLastActivity()) / 1000

    // Check if connection is stale
    if (secondsSinceActivity > this.options.staleThreshold) {
      this.reconnectIfNeeded()
    }
  }

  private reconnectIfNeeded() {
    if (this.isConnecting) return

    const now = Date.now()
    const timeSinceLastReconnect = now - this.lastReconnectAt

    // Exponential backoff
    const backoffTime = this.getReconnectInterval() * 1000
    if (timeSinceLastReconnect < backoffTime) return

    this.isConnecting = true
    this.lastReconnectAt = now
    this.reconnectAttempts++

    // In a real implementation, you'd trigger ActionCable reconnection here
    // For now, we'll just touch activity to simulate reconnection
    setTimeout(() => {
      touchActivity()
      this.isConnecting = false

      // Reset attempts on successful reconnection
      const secondsSinceActivity = (Date.now() - getLastActivity()) / 1000
      if (secondsSinceActivity < this.options.staleThreshold) {
        this.reconnectAttempts = 0
      }
    }, 100)
  }

  private getReconnectInterval(): number {
    const { reconnectInterval } = this.options
    const index = Math.min(this.reconnectAttempts, reconnectInterval.length - 1)
    return reconnectInterval[index]
  }

  private setupEventListeners() {
    if (typeof document !== 'undefined') {
      document.addEventListener('visibilitychange', this.visibilityDidChange)
      window.addEventListener('focus', this.visibilityDidChange)
    }
  }

  private removeEventListeners() {
    if (typeof document !== 'undefined') {
      document.removeEventListener('visibilitychange', this.visibilityDidChange)
      window.removeEventListener('focus', this.visibilityDidChange)
    }
  }

  private handleVisibilityChange() {
    if (document.visibilityState === 'visible' || document.hasFocus()) {
      // Immediately check connection when tab becomes visible
      setTimeout(() => this.poll(), 200)
    }
  }

  recordMessageActivity() {
    this.lastMessageActivity = Date.now()
  }

  getStats() {
    const now = Date.now()
    return {
      isRunning: this.isRunning,
      isConnecting: this.isConnecting,
      reconnectAttempts: this.reconnectAttempts,
      secondsSinceActivity: (now - getLastActivity()) / 1000,
      secondsSinceMessage: (now - this.lastMessageActivity) / 1000,
    }
  }
}

// Singleton instance
let monitor: PulseConnectionMonitor | null = null

export function startPulseMonitor(options?: Partial<ConnectionMonitorOptions>) {
  if (!monitor) {
    monitor = new PulseConnectionMonitor(options)
  }
  monitor.start()
  return monitor
}

export function stopPulseMonitor() {
  if (monitor) {
    monitor.stop()
  }
}

export function getPulseMonitorStats() {
  return monitor?.getStats() || {
    isRunning: false,
    isConnecting: false,
    reconnectAttempts: 0,
    secondsSinceActivity: Infinity,
    secondsSinceMessage: Infinity,
  }
}
